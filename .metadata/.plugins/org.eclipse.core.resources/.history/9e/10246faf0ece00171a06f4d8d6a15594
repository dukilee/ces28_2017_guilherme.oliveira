package presenter;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.StringTokenizer;
import java.util.Vector;

import model.CubicSpline;
import model.InterpolationMethod;
import model.Lagrange;

public class FileReader {
	
	 // RESPONSABILITY: ESCOLHER O METODO DE INTERPOLACAO DESEJADO E CRIAR O OBJETO CORRESPONDENTE
    public InterpolationMethod getMethod() { return interpolationModel; }
    public InterpolationMethod getMethod(String method) {
        switch (method) {
            case L_METHOD:
                interpolationModel = new Lagrange();
                break;
            case CS_METHOD:
                interpolationModel = new CubicSpline();
                break;
            default:
            	System.out.println("Unknown method " + method);
        }

        return interpolationModel;
    }
	
	// RESPONSABILITY: DADO O VALOR DE X, EFETIVAMENTE LER O ARQUIVO E CHAMAR O CALCULO. 
    public void calculateResult(float value, File file) {
        _value = value;
        buildDataPoints(file);
        if(getMethod() != null) {
            result = getMethod().calculateResult(_value, x, y);
            printResult();
        } else {
            System.out.println("It is not defined an interpolation method.");
        }
    }
	
	
	 // RESPONSABILITY: LER ARQUIVO DE DADOS
		private void buildDataPoints(File file) {
	        if(file == null)
	           return;
	        else _file = file;

	        x = new Vector<Double>();
	        y = new Vector<Double>();
	        try {
	            input = new FileReader(_file);
			    /* Filter FileReader through a Buffered read to read a line at a time */
	            bufRead = new BufferedReader(input);
	            // Read first line
	            String line = bufRead.readLine();
	            // Read through file one line at time.
	            while (line != null){
	                xy = new StringTokenizer(line, "\t ");
	                while(xy.hasMoreTokens()) {
	                    x.addElement(Double.parseDouble(xy.nextToken()));
	                    y.addElement(Double.parseDouble(xy.nextToken()));
	                }
	                line = bufRead.readLine();
	            }
	            bufRead.close();
	        } catch (IOException e) { // If another exception is generated, print a stack trace
	            e.printStackTrace();
	        }
	    }//buildDataPoints
}
